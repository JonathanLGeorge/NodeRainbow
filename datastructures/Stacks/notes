Stacks Introduction

A stack is a data structure which contains an ordered set of data.

Stacks provide three methods for interaction:

    Push - adds data to the “top” of the stack
    Pop - returns and removes data from the “top” of the stack
    Peek - returns data from the “top” of the stack without removing it

Stacks mimic a physical “stack” of objects. Consider a set of gym weights.

Each plate has a weight (the data). The first plate you add, or push, onto the floor is both the bottom and top of the stack. Each weight added becomes the new top of the stack.

At any point, the only weight you can remove, or pop, from the stack is the top one. You can peek and read the top weight without removing it from the stack.

The last plate that you put down becomes the first, and only, one that you can access. This is a Last In, First Out or LIFO structure. A less frequently used term is First In, Last Out, or FILO.






Stack overflow

Every stack has a size that determines how many nodes it can accommodate.
 Attempting to push a node in a full stack will result in a stack overflow.
  The program may crash due to a stack overflow.

A stack is illustrated in the given image. stackA.push(xg) will result in a 
stack overflow since the stack is already full.
stack overflow

    xf
    xe
    xd
    c
    xb
    xa
//stackA


The stack data structure

A stack is a data structure that follows a last in, first out (LIFO)
 protocol. The latest node added to a stack is the node which is eligible to be removed first.
  If three nodes (a, b and, c) are added to a stack in this exact same order, the node c must be
   removed first. The only way to remove or return the value of the node a is by removing the nodes c and b.
Main methods of a stack data structure

The stack data structure has three main methods: push(), pop() and peek(). The push() method adds a node
 to the top of the stack. The pop() method removes a node from the top of the stack. The peek() method returns
  the value of the top node without removing it from the stack.



Stacks Implementation

Stacks can be implemented using a linked list as the underlying data structure because it’s more efficient than a list or array.

Depending on the implementation, the top of the stack is equivalent to the head node of a linked list and the bottom of the stack is equivalent to the tail node.

A constraint that may be placed on a stack is its size. This is done to limit and quantify the resources the data structure will take up when it is “full”.

Attempting to push data onto an already full stack will result in a stack overflow. Similarly, if you attempt to pop data from an empty stack, it will result in a stack underflow.




Stacks:

    Contain data nodes
    Support three main operations
        Push adds data to the top of the stack
        Pop removes and provides data from the top of the stack
        Peek reveals data on the top of the stack
    Implementations include a linked list or array
    Can have a limited size
        Pushing data onto a full stack results in a stack overflow
    Stacks process data Last In, First Out (LIFO)
